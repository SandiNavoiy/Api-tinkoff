import os
from dotenv import load_dotenv
from tinkoff.invest import (
    Client, InstrumentIdType, OrderDirection, OrderType, Quotation
)
from decimal import Decimal, ROUND_DOWN
load_dotenv()
TOKEN_TIN = os.getenv("STRIPE_API_KEY")
TOKEN = TOKEN_TIN

ISIN_STOCKS = "RU000A101X76"   # ISIN –ë–ü–ò–§–∞ –Ω–∞ –∞–∫—Ü–∏–∏
ISIN_BONDS  = "RU000A1039N1"   # ISIN –ë–ü–ò–§–∞ –Ω–∞ –æ–±–ª–∏–≥–∞—Ü–∏–∏


def money_value_to_decimal(q: Quotation) -> Decimal:
    return Decimal(q.units) + Decimal(q.nano) / Decimal("1e9")

# üîç –ü–æ–ª—É—á–∞–µ–º FIGI –ø–æ ISIN
def get_figi(client, isin: str) -> str:
    instruments = client.instruments.find_instrument(query=isin).instruments
    for instr in instruments:
        if instr.isin == isin:
            return instr.figi
    raise Exception(f"‚ùå FIGI –ø–æ ISIN {isin} –Ω–µ –Ω–∞–π–¥–µ–Ω")

# üíµ –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É –ø–æ FIGI
def get_market_price(client, figi: str) -> Decimal:
    prices = client.market_data.get_last_prices(figi=[figi]).last_prices
    for p in prices:
        if p.figi == figi:
            return money_value_to_decimal(p.price)
    raise ValueError(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É –¥–ª—è FIGI {figi}")

# üìä –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—ã–π –±—Ä–æ–∫–µ—Ä—Å–∫–∏–π —Å—á—ë—Ç (–Ω–µ –ò–ò–°)
def get_account_id(client) -> str:
    accounts = client.users.get_accounts().accounts
    for acc in accounts:
        if acc.access_level.name == "ACCOUNT_ACCESS_LEVEL_FULL_ACCESS":
            return acc.id
    raise Exception("‚ùå –ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ –±—Ä–æ–∫–µ—Ä—Å–∫–æ–≥–æ —Å—á—ë—Ç–∞")

# üì¶ –ü–æ–ª—É—á–∞–µ–º –ø–æ—Ä—Ç—Ñ–µ–ª—å
def get_portfolio(client, account_id):
    return client.operations.get_portfolio(account_id=account_id)

# üìã –ü–µ—á–∞—Ç–∞–µ–º –≤—Å–µ –ø–æ–∑–∏—Ü–∏–∏
def print_all_positions(client, portfolio):
    print("\nüìã –í—Å–µ –ø–æ–∑–∏—Ü–∏–∏ –≤ –ø–æ—Ä—Ç—Ñ–µ–ª–µ:")
    for pos in portfolio.positions:
        try:
            instr = client.instruments.get_instrument_by(
                id_type=InstrumentIdType.INSTRUMENT_ID_TYPE_FIGI,
                id=pos.figi
            ).instrument
            isin = instr.isin
        except:
            isin = ""
        price = get_market_price(client, pos.figi)
        print(f"FIGI: {pos.figi} | ISIN: {isin} | Qty: {pos.quantity.units} | Price: {price:.2f}")

# üõí –°–æ–≤–µ—Ä—à–∞–µ–º –æ—Ä–¥–µ—Ä
def place_order(client, account_id, figi, quantity: int, direction: OrderDirection):
    if quantity < 1:
        print("‚ÑπÔ∏è –ö–æ–ª-–≤–æ –ª–æ—Ç–æ–≤ –º–µ–Ω—å—à–µ 1 ‚Äî –ø—Ä–æ–ø—É—Å–∫.")
        return
    client.orders.post_order(
        figi=figi,
        quantity=quantity,
        direction=direction,
        account_id=account_id,
        order_type=OrderType.ORDER_TYPE_MARKET,
        order_id="",  # UUID —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
    )
    print(f"‚úÖ Order_{direction.name.title()} {quantity} –ª–æ—Ç–æ–≤ –ø–æ FIGI {figi}")

# üîÑ –ì–ª–∞–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Ä–µ–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏
def rebalance():
    with Client(TOKEN) as client:
        print("\nüîÑ –ó–∞–ø—É—Å–∫ —Ä–µ–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏")
        account_id = get_account_id(client)
        portfolio = get_portfolio(client, account_id)
        print_all_positions(client, portfolio)

        # –ü–æ–ª—É—á–∞–µ–º FIGI –ø–æ ISIN
        figi_stocks = get_figi(client, ISIN_STOCKS)
        figi_bonds = get_figi(client, ISIN_BONDS)

        # –°—á–∏—Ç–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ø–æ–∑–∏—Ü–∏–π
        total_stocks = Decimal("0")
        total_bonds = Decimal("0")
        for p in portfolio.positions:
            price = get_market_price(client, p.figi)
            value = Decimal(p.quantity.units) * price
            if p.figi == figi_stocks:
                total_stocks += value
            elif p.figi == figi_bonds:
                total_bonds += value

        total = total_stocks + total_bonds
        print(f"\nüìä –ü–æ—Ä—Ç—Ñ–µ–ª—å: –ê–∫—Ü–∏–∏ = {total_stocks:.2f}‚ÇΩ | –û–±–ª–∏–≥–∞—Ü–∏–∏ = {total_bonds:.2f}‚ÇΩ | –í—Å–µ–≥–æ = {total:.2f}‚ÇΩ")

        # –†–∞—Å—á—ë—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        diff = (total / 2) - total_stocks
        if abs(diff) < 100:
            print("‚öñÔ∏è –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ < 100‚ÇΩ ‚Äî —Ä–µ–±–∞–ª–∞–Ω—Å –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.")
            return

        # direction = OrderDirection.ORDER_DIRECTION_BUY if diff > 0 else OrderDirection.ORDER_DIRECTION_SELL
        #
        # # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–æ—Ç–æ–≤
        # stock_price = get_market_price(client, figi_stocks)
        # qty = (abs(diff) / stock_price).quantize(Decimal("1"), rounding=ROUND_DOWN)
        #
        # place_order(client, account_id, figi_stocks, int(qty), direction)

# üöÄ –°—Ç–∞—Ä—Ç
if __name__ == "__main__":
    rebalance()